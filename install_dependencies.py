#!/usr/bin/env python3
"""
Script d'installation pour Floor Plan Generator
G√®re les d√©pendances sp√©cifiques et les probl√®mes de compatibilit√©
"""

import subprocess
import sys
import platform
import importlib.util

def check_module_installed(module_name):
    """V√©rifie si un module est install√©"""
    spec = importlib.util.find_spec(module_name)
    return spec is not None

def install_package(package):
    """Installe un package via pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError:
        return False

def install_torch_nightly():
    """Installe PyTorch nightly"""
    print("üî• Installation de PyTorch nightly...")
    
    # D√©tecter le syst√®me et l'architecture
    system = platform.system().lower()
    machine = platform.machine().lower()
    
    if system == "darwin" and ("arm" in machine or "aarch64" in machine):
        # macOS Apple Silicon
        torch_url = "https://download.pytorch.org/whl/nightly/cpu"
        print("üçé D√©tect√©: macOS Apple Silicon")
    elif system == "darwin":
        # macOS Intel
        torch_url = "https://download.pytorch.org/whl/nightly/cpu"
        print("üçé D√©tect√©: macOS Intel")
    elif system == "linux":
        # Linux - v√©rifier CUDA
        try:
            subprocess.run(["nvidia-smi"], capture_output=True, check=True)
            torch_url = "https://download.pytorch.org/whl/nightly/cu121"
            print("üêß D√©tect√©: Linux avec CUDA")
        except:
            torch_url = "https://download.pytorch.org/whl/nightly/cpu"
            print("üêß D√©tect√©: Linux sans CUDA")
    else:
        # Windows
        torch_url = "https://download.pytorch.org/whl/nightly/cu121"
        print("ü™ü D√©tect√©: Windows")
    
    # Installer PyTorch nightly
    cmd = [
        sys.executable, "-m", "pip", "install", 
        "--pre", "torch", "torchvision", "torchaudio",
        "--index-url", torch_url
    ]
    
    try:
        subprocess.check_call(cmd)
        print("‚úÖ PyTorch nightly install√© avec succ√®s")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de l'installation de PyTorch nightly")
        return False

def install_safetensors():
    """Installe safetensors avec gestion d'erreurs"""
    print("üîê Installation de safetensors...")
    
    # Essayer d'abord la version stable
    packages_to_try = [
        "safetensors>=0.3.0",
        "safetensors==0.4.2",
        "safetensors==0.4.1",
        "safetensors==0.4.0",
        "safetensors==0.3.3"
    ]
    
    for package in packages_to_try:
        print(f"   Tentative: {package}")
        if install_package(package):
            print(f"‚úÖ {package} install√© avec succ√®s")
            return True
        else:
            print(f"‚ùå √âchec: {package}")
    
    print("‚ùå Impossible d'installer safetensors")
    return False

def install_core_dependencies():
    """Installe les d√©pendances principales"""
    print("üì¶ Installation des d√©pendances principales...")
    
    # D√©pendances critiques √† installer individuellement
    critical_deps = [
        "streamlit>=1.28.0",
        "diffusers>=0.21.0", 
        "transformers>=4.21.0",
        "accelerate>=0.20.0",
        "peft>=0.5.0",
        "Pillow>=10.0.0",
        "opencv-python>=4.8.0",
        "numpy>=1.24.0",
        "PyYAML>=6.0",
        "requests>=2.31.0",
        "tqdm>=4.65.0",
        "psutil>=5.9.0"
    ]
    
    failed_packages = []
    
    for package in critical_deps:
        print(f"   Installation: {package}")
        if install_package(package):
            print(f"   ‚úÖ {package}")
        else:
            print(f"   ‚ùå {package}")
            failed_packages.append(package)
    
    return failed_packages

def install_optional_dependencies():
    """Installe les d√©pendances optionnelles"""
    print("üéÅ Installation des d√©pendances optionnelles...")
    
    optional_deps = [
        "boto3>=1.28.0",
        "python-dotenv>=1.0.0",
        "streamlit-option-menu>=0.3.6"
    ]
    
    for package in optional_deps:
        print(f"   Installation: {package}")
        if install_package(package):
            print(f"   ‚úÖ {package}")
        else:
            print(f"   ‚ö†Ô∏è  {package} (optionnel)")

def verify_installation():
    """V√©rifie que les modules critiques sont install√©s"""
    print("üîç V√©rification de l'installation...")
    
    critical_modules = [
        "streamlit",
        "torch",
        "diffusers", 
        "transformers",
        "peft",
        "PIL",
        "cv2",
        "numpy",
        "yaml",
        "safetensors"
    ]
    
    missing = []
    
    for module in critical_modules:
        if check_module_installed(module):
            print(f"   ‚úÖ {module}")
        else:
            print(f"   ‚ùå {module}")
            missing.append(module)
    
    # V√©rifier sqlite3 (int√©gr√© √† Python)
    if check_module_installed("sqlite3"):
        print("   ‚úÖ sqlite3 (int√©gr√©)")
    else:
        print("   ‚ùå sqlite3 (probl√®me Python)")
        missing.append("sqlite3")
    
    return missing

def main():
    """Fonction principale d'installation"""
    print("üöÄ Installation des d√©pendances pour Floor Plan Generator")
    print("=" * 60)
    
    # V√©rifier si nous sommes dans un environnement virtuel
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ Environnement virtuel d√©tect√©")
    else:
        print("‚ö†Ô∏è  Aucun environnement virtuel d√©tect√©")
        response = input("Continuer quand m√™me ? (y/N): ")
        if response.lower() != 'y':
            print("Installation annul√©e")
            return False
    
    print(f"üêç Python {sys.version}")
    print(f"üíª Syst√®me: {platform.system()} {platform.machine()}")
    
    # √âtape 1: V√©rifier si PyTorch nightly est d√©j√† install√©
    if check_module_installed("torch"):
        print("‚úÖ PyTorch d√©j√† install√©")
        try:
            import torch
            print(f"   Version: {torch.__version__}")
        except ImportError:
            print("   ‚ö†Ô∏è  PyTorch install√© mais non importable")
    else:
        print("üì¶ PyTorch non trouv√©, installation...")
        if not install_torch_nightly():
            print("‚ùå Impossible d'installer PyTorch")
            return False
    
    # √âtape 2: Installer safetensors
    if not check_module_installed("safetensors"):
        if not install_safetensors():
            print("‚ö†Ô∏è  safetensors non install√©, certaines fonctionnalit√©s peuvent ne pas marcher")
    else:
        print("‚úÖ safetensors d√©j√† install√©")
    
    # √âtape 3: Installer les d√©pendances principales
    failed = install_core_dependencies()
    
    # √âtape 4: Installer les d√©pendances optionnelles
    install_optional_dependencies()
    
    # √âtape 5: V√©rification finale
    missing = verify_installation()
    
    print("\n" + "=" * 60)
    print("üìä R√©sum√© de l'installation:")
    
    if not missing:
        print("‚úÖ Toutes les d√©pendances critiques sont install√©es")
        print("üéâ Installation termin√©e avec succ√®s!")
        print("\nüöÄ Vous pouvez maintenant lancer:")
        print("   streamlit run streamlit_app.py")
        return True
    else:
        print("‚ùå D√©pendances manquantes:")
        for module in missing:
            print(f"   - {module}")
        print("\nüîß Solutions possibles:")
        print("   1. R√©ex√©cuter ce script")
        print("   2. Installer manuellement: pip install <package>")
        print("   3. V√©rifier votre environnement Python")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)