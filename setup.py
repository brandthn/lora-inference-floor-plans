#!/usr/bin/env python3
"""
Script de setup pour Floor Plan Generator

Ce script configure l'environnement et v√©rifie les d√©pendances.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_python_version():
    """V√©rifie la version de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou sup√©rieur requis")
        print(f"Version actuelle: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")
    return True

def check_cuda():
    """V√©rifie la disponibilit√© de CUDA"""
    try:
        result = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ CUDA disponible")
            return True
        else:
            print("‚ö†Ô∏è  CUDA non d√©tect√© - utilisation du CPU")
            return False
    except FileNotFoundError:
        print("‚ö†Ô∏è  NVIDIA-SMI non trouv√© - utilisation du CPU")
        return False

def create_directory_structure():
    """Cr√©e la structure de dossiers n√©cessaire"""
    directories = [
        "config",
        "data/models/base",
        "data/models/lora",
        "data/models/controlnet",
        "data/generations",
        "core/utils",
        "app/pages",
        "app/components"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"üìÅ Cr√©√©: {directory}")

def create_config_files():
    """Cr√©e les fichiers de configuration par d√©faut"""
    
    # Fichier .env
    env_content = """
# Configuration pour Floor Plan Generator

# Chemins des mod√®les (√† adapter selon votre installation)
BASE_MODEL_PATH=data/models/base
LORA_MODEL_PATH=data/models/lora
CONTROLNET_MODEL_PATH=data/models/controlnet

# Configuration AWS S3 (optionnel)
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=us-east-1
S3_BUCKET_NAME=

# Configuration de l'application
MAX_WORKERS=1
DEBUG=false
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env cr√©√©")

def install_requirements():
    """Installe les d√©pendances"""
    print("üì¶ Installation des d√©pendances...")
    
    # Utiliser le script d'installation personnalis√©
    try:
        subprocess.run([sys.executable, "install_dependencies.py"], check=True)
        print("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de l'installation des d√©pendances")
        print("üí° Essayez d'ex√©cuter manuellement: python install_dependencies.py")
        return False

def check_model_files():
    """V√©rifie la pr√©sence des fichiers mod√®les"""
    print("\nüìã V√©rification des mod√®les...")
    
    required_files = {
        "Mod√®les de base": [
            "data/models/base/sd_xl_base_1.0.safetensors",
            "data/models/base/xl_juggernautXL_juggXIByRundiffusion.safetensors"
        ],
        "Mod√®les LoRA": [
            "data/models/lora/lora_plan_v1.safetensors",
            "data/models/lora/lora_plan_v2.safetensors", 
            "data/models/lora/wall_lora.safetensors"
        ],
        "Mod√®les ControlNet": [
            "data/models/controlnet/control_canny.safetensors"
        ]
    }
    
    missing_files = []
    
    for category, files in required_files.items():
        print(f"\n{category}:")
        for file_path in files:
            if os.path.exists(file_path):
                print(f"  ‚úÖ {file_path}")
            else:
                print(f"  ‚ùå {file_path} (manquant)")
                missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  {len(missing_files)} fichiers mod√®les manquants")
        print("üìù Placez vos mod√®les dans les dossiers appropri√©s selon la configuration")
        return False
    
    print("\n‚úÖ Tous les mod√®les requis sont pr√©sents")
    return True

def create_launch_script():
    """Cr√©e un script de lancement"""
    
    # Script pour Linux/macOS
    launch_sh = """#!/bin/bash
echo "üöÄ Lancement de Floor Plan Generator..."
streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0
"""
    
    with open("launch.sh", "w") as f:
        f.write(launch_sh)
    
    # Rendre ex√©cutable
    os.chmod("launch.sh", 0o755)
    
    # Script pour Windows
    launch_bat = """@echo off
echo üöÄ Lancement de Floor Plan Generator...
streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0
pause
"""
    
    with open("launch.bat", "w") as f:
        f.write(launch_bat)
    
    print("‚úÖ Scripts de lancement cr√©√©s (launch.sh et launch.bat)")

def main():
    """Fonction principale de setup"""
    print("üè† Floor Plan Generator - Script de Setup")
    print("=" * 50)
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        return False
    
    check_cuda()
    
    print("\nüìÅ Cr√©ation de la structure de dossiers...")
    create_directory_structure()
    
    print("\n‚öôÔ∏è  Cr√©ation des fichiers de configuration...")
    create_config_files()
    
    print("\nüì¶ Installation des d√©pendances...")
    if not install_requirements():
        return False
    
    print("\nüöÄ Cr√©ation des scripts de lancement...")
    create_launch_script()
    
    print("\nüìã V√©rification des mod√®les...")
    models_ok = check_model_files()
    
    print("\n" + "=" * 50)
    print("üìä R√©sum√© du setup:")
    print("‚úÖ Structure de dossiers cr√©√©e")
    print("‚úÖ Configuration g√©n√©r√©e")
    print("‚úÖ D√©pendances install√©es")
    print("‚úÖ Scripts de lancement cr√©√©s")
    
    if models_ok:
        print("‚úÖ Mod√®les v√©rifi√©s")
        print("\nüéâ Setup termin√© avec succ√®s!")
        print("üöÄ Lancez l'application avec: ./launch.sh (Linux/macOS) ou launch.bat (Windows)")
        print("üåê Ou directement: streamlit run streamlit_app.py")
    else:
        print("‚ö†Ô∏è  Mod√®les manquants")
        print("\nüìù Prochaines √©tapes:")
        print("1. Placez vos mod√®les dans les dossiers appropri√©s")
        print("2. V√©rifiez la configuration dans config/models_config.yaml")
        print("3. Lancez l'application avec: ./launch.sh ou launch.bat")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)