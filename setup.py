#!/usr/bin/env python3
"""
Script de setup pour Floor Plan Generator
"""

import os
import sys
from pathlib import Path

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    directories = [
        "models/Wall_Lora_2",
        "models/floor_plans_a_v1", 
        "outputs",
        "app"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úì R√©pertoire cr√©√©: {directory}")

def setup_env_file():
    """Configure le fichier .env"""
    env_path = Path(".env")
    env_example_path = Path(".env.example")
    
    if not env_path.exists() and env_example_path.exists():
        # Copier .env.example vers .env
        with open(env_example_path, 'r') as f:
            content = f.read()
        
        with open(env_path, 'w') as f:
            f.write(content)
        
        print("‚úì Fichier .env cr√©√© depuis .env.example")
        print("‚ö†Ô∏è  Veuillez √©diter .env avec vos credentials AWS")
    else:
        print("‚úì Fichier .env d√©j√† existant")

def check_model_files():
    """V√©rifie la pr√©sence des fichiers mod√®les"""
    wall_lora_path = Path("models/Wall_Lora_2")
    floor_plan_lora_path = Path("models/floor_plans_a_v1")
    
    if not any(wall_lora_path.glob("*.safetensors")):
        print("‚ö†Ô∏è  Fichiers Wall_Lora_2 non trouv√©s dans models/Wall_Lora_2/")
        print("   Veuillez copier vos fichiers .safetensors dans ce r√©pertoire")
    else:
        print("‚úì Fichiers Wall_Lora_2 trouv√©s")
    
    if not any(floor_plan_lora_path.glob("*.safetensors")):
        print("‚ö†Ô∏è  Fichiers floor_plans_a_v1 non trouv√©s dans models/floor_plans_a_v1/")
        print("   Veuillez copier vos fichiers .safetensors dans ce r√©pertoire")
    else:
        print("‚úì Fichiers floor_plans_a_v1 trouv√©s")

def install_requirements():
    """Installe les d√©pendances"""
    try:
        import subprocess
        print("Installation des d√©pendances...")
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True)
        print("‚úì D√©pendances install√©es avec succ√®s")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        return False
    return True

def main():
    """Setup principal"""
    print("üè† Floor Plan Generator - Setup")
    print("=" * 40)
    
    # Cr√©er les r√©pertoires
    create_directories()
    
    # Configurer .env
    setup_env_file()
    
    # V√©rifier les mod√®les
    check_model_files()
    
    # Installer les d√©pendances
    if input("\nInstaller les d√©pendances Python ? (y/n): ").lower() == 'y':
        install_requirements()
    
    print("\n" + "=" * 40)
    print("Setup termin√© ! üéâ")
    print("\nProchaines √©tapes:")
    print("1. Placez vos fichiers LoRA dans les r√©pertoires models/")
    print("2. Configurez vos credentials AWS dans .env")
    print("3. Lancez l'application avec: ./run_streamlit.sh")
    print("   ou: streamlit run streamlit_app.py")

if __name__ == "__main__":
    main()